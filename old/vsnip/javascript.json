{
  "Class": {
    "prefix": ["class"],
    "body": [
      "/**",
      " * @author ${VIM:\\$USER}",
      " */",
      "class $1 ${2:extends ${3:Parent} }{",
      "\tconstructor() {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Class definition template."
  },
  "jest describe": {
    "prefix": ["des", "desc", "describe"],
    "body": ["describe('$1', () => {", "\ttest$2", "})"]
  },
  "Test": {
    "prefix": ["test"],
    "body": ["test('$1', $2 () => {", "\t$3", "})"]
  },
  "const async fn": {
    "prefix": ["aconst", "constAsync"],
    "body": ["const $1 = async ($2) => {", "\t$3", "}"]
  },
  "workflow test": {
    "prefix": ["workflowTestFile"],
    "body": [
      "// Test Preperation",
      "jest.mock('nodemailer', () => require('../../../_mocks_/nodemailer'));",
      "jest.mock('../../../dataConnections', () =>",
      "  require('../../../dataConnections/_mocks_'),",
      ");",
      "const dotenv = require('dotenv');",
      "dotenv.config();",
      "const {",
      "  grid: {",
      "    queries: { getUserData, casesQuery },",
      "    mutations: { updateCase, addCaseNote },",
      "  },",
      "} = require('./../../../dataConnections');",
      "",
      "const {",
      "  _responseTypes: { createSingleResultCasesQuery, createNoResultCasesQuery },",
      "} = casesQuery;",
      "",
      "const {",
      "  grid: {",
      "    CASES: {",
      "      STATUS: { OPEN_CASE_STATUS_ID },",
      "    },",
      "  },",
      "} = require('../../../constants');",
      "",
      "const { run: workflow } = require('../$1');",
      "",
      "const installationId = $2;",
      "const createdBy = $3;",
      "",
      "beforeEach(() => {",
      "  jest.clearAllMocks();",
      "});",
      "describe"
    ]
  },
  "workflow template": {
    "prefix": ["workflow"],
    "body": [
      "const { defaultLogger } = require('../../utils/logging');",
      "const {",
      "  grid: {",
      "  },",
      "} = require('../../constants');",
      "const { $1 } = require('./steps');",
      "const {",
      "  steps: {",
      "    grid: {},",
      "  },",
      "  step: { executeWorkflowStep },",
      "  constants: { STEP_RESULTS, WORKFLOW_STATES },",
      "  defaultFailureEmailTemplate,",
      "  defaultSuccessEmailTemplate,",
      "  workflow: { createNewStatusTracker, endWorkflow },",
      "} = require('./../../workflow/v1');",
      "",
      "const triggerStep = $2({",
      "  $3",
      "});",
      "",
      "const run = async (form) => {",
      "  const name = '$4';",
      "  const log = defaultLogger.child({",
      "    workflow: name,",
      "  });",
      "  const statusTracker = createNewStatusTracker(name);",
      "  const { installationId, answers, createdBy } = form;",
      "  try {",
      "    const { stepStatus: triggerStatus } = await executeWorkflowStep(",
      "      { installationId, answers },",
      "      statusTracker,",
      "      triggerStep,",
      "    );",
      "    if (triggerStatus === STEP_RESULTS.FAILURE) {",
      "      log.debug(",
      "        `trigger failed for \\${name}`,",
      "      );",
      "      return endWorkflow(",
      "        WORKFLOW_STATES.TERMINAL,",
      "        statusTracker,",
      "        createdBy,",
      "        defaultFailureEmailTemplate,",
      "        defaultSuccessEmailTemplate,",
      "      );",
      "    }",
      "    endWorkflow(",
      "      WORKFLOW_STATES.SUCCESS,",
      "      statusTracker,",
      "      createdBy,",
      "      defaultFailureEmailTemplate,",
      "      defaultSuccessEmailTemplate,",
      "    );",
      "  } catch (err) {",
      "    err.message = `failed to run \\${name} workflow: \\${err.messsage}`;",
      "    log.error({ err }, err.message);",
      "    endWorkflow(",
      "      WORKFLOW_STATES.FAILURE,",
      "      statusTracker,",
      "      createdBy,",
      "      defaultFailureEmailTemplate,",
      "      defaultSuccessEmailTemplate,",
      "    );",
      "    throw err;",
      "  }",
      "};",
      "",
      "module.exports = { run };"
    ]
  }
}
